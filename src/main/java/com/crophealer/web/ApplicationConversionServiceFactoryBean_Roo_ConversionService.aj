// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.crophealer.web;

import com.crophealer.domain.Country;
import com.crophealer.domain.GrowthPhase;
import com.crophealer.domain.GrowthPhaseTranslation;
import com.crophealer.domain.Languages;
import com.crophealer.domain.Plant;
import com.crophealer.domain.PlantTranslation;
import com.crophealer.web.ApplicationConversionServiceFactoryBean;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    public Converter<Country, String> ApplicationConversionServiceFactoryBean.getCountryToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.crophealer.domain.Country, java.lang.String>() {
            public String convert(Country country) {
                return new StringBuilder().append(country.getName()).toString();
            }
        };
    }
    
    public Converter<Long, Country> ApplicationConversionServiceFactoryBean.getIdToCountryConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.crophealer.domain.Country>() {
            public com.crophealer.domain.Country convert(java.lang.Long id) {
                return Country.findCountry(id);
            }
        };
    }
    
    public Converter<String, Country> ApplicationConversionServiceFactoryBean.getStringToCountryConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.crophealer.domain.Country>() {
            public com.crophealer.domain.Country convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Country.class);
            }
        };
    }
    
    public Converter<GrowthPhase, String> ApplicationConversionServiceFactoryBean.getGrowthPhaseToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.crophealer.domain.GrowthPhase, java.lang.String>() {
            public String convert(GrowthPhase growthPhase) {
                return new StringBuilder().append(growthPhase.getComment()).append(' ').append(growthPhase.getIconUrl()).toString();
            }
        };
    }
    
    public Converter<Long, GrowthPhase> ApplicationConversionServiceFactoryBean.getIdToGrowthPhaseConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.crophealer.domain.GrowthPhase>() {
            public com.crophealer.domain.GrowthPhase convert(java.lang.Long id) {
                return GrowthPhase.findGrowthPhase(id);
            }
        };
    }
    
    public Converter<String, GrowthPhase> ApplicationConversionServiceFactoryBean.getStringToGrowthPhaseConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.crophealer.domain.GrowthPhase>() {
            public com.crophealer.domain.GrowthPhase convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), GrowthPhase.class);
            }
        };
    }
    
    public Converter<GrowthPhaseTranslation, String> ApplicationConversionServiceFactoryBean.getGrowthPhaseTranslationToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.crophealer.domain.GrowthPhaseTranslation, java.lang.String>() {
            public String convert(GrowthPhaseTranslation growthPhaseTranslation) {
                return new StringBuilder().append(growthPhaseTranslation.getName()).append(' ').append(growthPhaseTranslation.getDescription()).toString();
            }
        };
    }
    
    public Converter<Long, GrowthPhaseTranslation> ApplicationConversionServiceFactoryBean.getIdToGrowthPhaseTranslationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.crophealer.domain.GrowthPhaseTranslation>() {
            public com.crophealer.domain.GrowthPhaseTranslation convert(java.lang.Long id) {
                return GrowthPhaseTranslation.findGrowthPhaseTranslation(id);
            }
        };
    }
    
    public Converter<String, GrowthPhaseTranslation> ApplicationConversionServiceFactoryBean.getStringToGrowthPhaseTranslationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.crophealer.domain.GrowthPhaseTranslation>() {
            public com.crophealer.domain.GrowthPhaseTranslation convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), GrowthPhaseTranslation.class);
            }
        };
    }
    
    public Converter<Languages, String> ApplicationConversionServiceFactoryBean.getLanguagesToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.crophealer.domain.Languages, java.lang.String>() {
            public String convert(Languages languages) {
                return new StringBuilder().append(languages.getName()).append(' ').append(languages.getNativeName()).toString();
            }
        };
    }
    
    public Converter<Long, Languages> ApplicationConversionServiceFactoryBean.getIdToLanguagesConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.crophealer.domain.Languages>() {
            public com.crophealer.domain.Languages convert(java.lang.Long id) {
                return Languages.findLanguages(id);
            }
        };
    }
    
    public Converter<String, Languages> ApplicationConversionServiceFactoryBean.getStringToLanguagesConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.crophealer.domain.Languages>() {
            public com.crophealer.domain.Languages convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Languages.class);
            }
        };
    }
    
    public Converter<Plant, String> ApplicationConversionServiceFactoryBean.getPlantToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.crophealer.domain.Plant, java.lang.String>() {
            public String convert(Plant plant) {
                return new StringBuilder().append(plant.getComment()).append(' ').append(plant.getIconUrl()).toString();
            }
        };
    }
    
    public Converter<Long, Plant> ApplicationConversionServiceFactoryBean.getIdToPlantConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.crophealer.domain.Plant>() {
            public com.crophealer.domain.Plant convert(java.lang.Long id) {
                return Plant.findPlant(id);
            }
        };
    }
    
    public Converter<String, Plant> ApplicationConversionServiceFactoryBean.getStringToPlantConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.crophealer.domain.Plant>() {
            public com.crophealer.domain.Plant convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), Plant.class);
            }
        };
    }
    
    public Converter<PlantTranslation, String> ApplicationConversionServiceFactoryBean.getPlantTranslationToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.crophealer.domain.PlantTranslation, java.lang.String>() {
            public String convert(PlantTranslation plantTranslation) {
                return new StringBuilder().append(plantTranslation.getName()).append(' ').append(plantTranslation.getDescription()).toString();
            }
        };
    }
    
    public Converter<Long, PlantTranslation> ApplicationConversionServiceFactoryBean.getIdToPlantTranslationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Long, com.crophealer.domain.PlantTranslation>() {
            public com.crophealer.domain.PlantTranslation convert(java.lang.Long id) {
                return PlantTranslation.findPlantTranslation(id);
            }
        };
    }
    
    public Converter<String, PlantTranslation> ApplicationConversionServiceFactoryBean.getStringToPlantTranslationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.crophealer.domain.PlantTranslation>() {
            public com.crophealer.domain.PlantTranslation convert(String id) {
                return getObject().convert(getObject().convert(id, Long.class), PlantTranslation.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getCountryToStringConverter());
        registry.addConverter(getIdToCountryConverter());
        registry.addConverter(getStringToCountryConverter());
        registry.addConverter(getGrowthPhaseToStringConverter());
        registry.addConverter(getIdToGrowthPhaseConverter());
        registry.addConverter(getStringToGrowthPhaseConverter());
        registry.addConverter(getGrowthPhaseTranslationToStringConverter());
        registry.addConverter(getIdToGrowthPhaseTranslationConverter());
        registry.addConverter(getStringToGrowthPhaseTranslationConverter());
        registry.addConverter(getLanguagesToStringConverter());
        registry.addConverter(getIdToLanguagesConverter());
        registry.addConverter(getStringToLanguagesConverter());
        registry.addConverter(getPlantToStringConverter());
        registry.addConverter(getIdToPlantConverter());
        registry.addConverter(getStringToPlantConverter());
        registry.addConverter(getPlantTranslationToStringConverter());
        registry.addConverter(getIdToPlantTranslationConverter());
        registry.addConverter(getStringToPlantTranslationConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
