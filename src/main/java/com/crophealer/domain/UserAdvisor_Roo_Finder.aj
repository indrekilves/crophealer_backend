// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.crophealer.domain;

import com.crophealer.domain.UserAdvisor;
import com.crophealer.security.Users;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect UserAdvisor_Roo_Finder {
    
    public static TypedQuery<UserAdvisor> UserAdvisor.findUserAdvisorsByAdvisor(Users advisor) {
        if (advisor == null) throw new IllegalArgumentException("The advisor argument is required");
        EntityManager em = UserAdvisor.entityManager();
        TypedQuery<UserAdvisor> q = em.createQuery("SELECT o FROM UserAdvisor AS o WHERE o.advisor = :advisor", UserAdvisor.class);
        q.setParameter("advisor", advisor);
        return q;
    }
    
    public static TypedQuery<UserAdvisor> UserAdvisor.findUserAdvisorsByAdvisorAndClient(Users advisor, Users client) {
        if (advisor == null) throw new IllegalArgumentException("The advisor argument is required");
        if (client == null) throw new IllegalArgumentException("The client argument is required");
        EntityManager em = UserAdvisor.entityManager();
        TypedQuery<UserAdvisor> q = em.createQuery("SELECT o FROM UserAdvisor AS o WHERE o.advisor = :advisor AND o.client = :client", UserAdvisor.class);
        q.setParameter("advisor", advisor);
        q.setParameter("client", client);
        return q;
    }
    
    public static TypedQuery<UserAdvisor> UserAdvisor.findUserAdvisorsByAdvisorAndStatusEquals(Users advisor, String status) {
        if (advisor == null) throw new IllegalArgumentException("The advisor argument is required");
        if (status == null || status.length() == 0) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = UserAdvisor.entityManager();
        TypedQuery<UserAdvisor> q = em.createQuery("SELECT o FROM UserAdvisor AS o WHERE o.advisor = :advisor AND o.status = :status", UserAdvisor.class);
        q.setParameter("advisor", advisor);
        q.setParameter("status", status);
        return q;
    }
    
    public static TypedQuery<UserAdvisor> UserAdvisor.findUserAdvisorsByClientAndStatusEquals(Users client, String status) {
        if (client == null) throw new IllegalArgumentException("The client argument is required");
        if (status == null || status.length() == 0) throw new IllegalArgumentException("The status argument is required");
        EntityManager em = UserAdvisor.entityManager();
        TypedQuery<UserAdvisor> q = em.createQuery("SELECT o FROM UserAdvisor AS o WHERE o.client = :client AND o.status = :status", UserAdvisor.class);
        q.setParameter("client", client);
        q.setParameter("status", status);
        return q;
    }
    
}
